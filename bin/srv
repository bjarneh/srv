#!/bin/bash
#
#  Copyright Â© 2013 bjarneh@ifi.uio.no
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


# globals

ACTION="help"
USE_ANSI_COLOR="yes"
GUESS_CATALINA_HOME="no"
FILTER="*.war"
TAIL_FROM='50'
ANSI_RED="\033[0;31m"
ANSI_GREEN="\033[0;32m"
ANSI_NORMAL="\033[0m"


die(){
    if [ ! -z "${1}" ]; then
        if [ "${USE_ANSI_COLOR}" = "no" ]; then
            echo -e >&2 "[ERROR] ${1}"
        else
            echo -e >&2 "[${ANSI_RED}ERROR${ANSI_NORMAL}] ${1}"
        fi
    fi
    exit 1
}


info(){
    if [ "${USE_ANSI_COLOR}" = "no" ]; then
        echo -en "[srv] "
    else
        echo -en "[${ANSI_GREEN}srv${ANSI_NORMAL}] "
    fi
    echo -e "${1}"
}


sanity(){

    local tomcat_version

    if [ "${ACTION}" != "help" ]; then

        if [ -z "${CATALINA_HOME}" -a "${GUESS_CATALINA_HOME}" = "yes" ]; then
            tomcat_version=$(ls /var/lib/ | grep tomcat | sort -V | tail -1)
            if [ -z "${tomcat_version}" ]; then
                die "no tomcat install found in /var/lib/"
            fi
            CATALINA_HOME="/var/lib/${tomcat_version}"
            CATALINA_BASE="/usr/share/${tomcat_version}"
        fi

        if [ -z "${CATALINA_HOME}" ]; then
            die "missing \$CATALINA_HOME"
        fi
    fi
}


menu_exit(){
cat <<EOH

 srv - apache tomcat helper script

 usage: srv ACTION [OPTIONS]

 Possible actions:

    help   print this menu and exit(0)
    list   list information about server setup
    drop   remove war files from webapps (alias: clean)
    fire   fire up your tomcat server (alias: start)
    stop   stop your tomcat server
    anew   restart tomcat (alias: restart)
    alog   tail tomcat access log (alias: access)
    tail   tail -F \$CATALINA_HOME/logs/catalina.out

 Possible options:

    -n     never print ANSI control sequences (colors)
    -N     N number of lines included in tail
    -c     guess CATALINA_HOME on *nix (/var/lib/tomcat\\d+)
    -f     filter for drop target (default: *.war)

EOH
    exit 0
}


action(){

    case "${1}" in
        'list' | 'l' | 'li' | '-l' | '-list' | '--list')
            ACTION='list';;
        'drop' | 'clean' | 'd' | 'dr' | '-d' | '-drop' | '--drop')
            ACTION='drop';;
        'fire' | 'start' | 'f' | 'fi' | '-f' | '-fire' | '--fire')
            ACTION='fire';;
        'stop' | 's' | 'st' | '-s' | '-stop' | '--stop')
            ACTION='stop';;
        'anew' | 'a' | 'n' | '-a' | '-anew' | '--anew' | 'restart')
            ACTION='anew';;
        'alog' | 'A' | '-A' | '-alog' | '--alog' | 'access')
            ACTION='alog';;
        'tail' | 't' | '-tail' | '--tail')
            ACTION='tail';;
        'test')
            ACTION='test';;
        *) # '-help' 'help' will work as well naturally
            ACTION='help';;
    esac

    return 0

}

#TODO add more info
list_info(){

    is_tomcat_running && is_running="ok" || is_running=""
    if [ -z "${is_running}"  ]; then
        info "Tomcat is not running"
    else
        info "Tomcat is running"
    fi
    info "CATALINA_HOME=${CATALINA_HOME}"
    info "CATALINA_BASE=${CATALINA_BASE}"
    info "    JAVA_OPTS=${JAVA_OPTS}"

    local deploymens=$(ls ${CATALINA_HOME}/webapps/*| grep '.war')
    local wars=''

    for d in ${deploymens};
    do
        wars="$wars $(basename ${d})"
    done
    info "DEPLOYED WARS=${wars}"
}

is_tomcat_running(){
    
    local is_running
    is_running=$(ps -ef | grep -i java| grep -i tomcat | grep -v grep)

    if [ -z "${is_running}" ]; then
        return 1
    else
        return 0
    fi

}

start_tomcat(){

    local is_running

    is_tomcat_running && is_running="ok" || is_running=""

    if [ ! -z "${is_running}" ]; then
        die "tomcat is already running"
    else
        info "starting tomcat"
    fi

    cd "${CATALINA_HOME}"/bin && ./startup.sh 1>/dev/null

}


stop_tomcat(){

    local is_running
    local secs

    let secs=0

    is_tomcat_running && is_running="ok" || is_running=""

    if [ -z "${is_running}" ]; then
        die "tomcat does not seem to be running"
    else
        info "stopping tomcat"
    fi

    cd "${CATALINA_HOME}"/bin

    ./shutdown.sh -force 1>/dev/null
    is_tomcat_running && is_running="ok" || is_running=""

    while [ ! -z "${is_running}" -a \( "${secs}" != "10" \) ];
    do
        info "waiting for tomcat to stop.. (${secs} sec)"
        sleep 1
        let secs=secs+1
        is_tomcat_running && is_running="ok" || is_running=""
    done

    if [ "${secs}" == "10" ]; then
        die "giving up, tomcat did not stop within 10 seconds"
    fi

}

restart_tomcat(){
    
    stop_tomcat
    start_tomcat

}


drop_wars(){
    
    info "cd \$CATALINA_HOME/webapps"
    cd "${CATALINA_HOME}"/webapps || die ""

    info "rm -rf ${FILTER}"
    rm -rf ${FILTER}
}


tail_access(){

    local tomcat_access_path
    local tomcat_access_log_file
    local tomcat_access_log_fmt="localhost_access_log.%Y-%m-%d.txt"

    if [ ! -z "${CATALINA_HOME}" ]; then

        tomcat_access_log_file=$(date +"${tomcat_access_log_fmt}")
        tomcat_access_path="${CATALINA_HOME}/logs/${tomcat_access_log_file}"

        if [ -f "${tomcat_access_path}" ]; then
            tail -F -n "${TAIL_FROM}" "${tomcat_access_path}"
        else
            die "No access log-file: ${tomcat_access_path}"
        fi

    else
        die "missing \$CATALINA_HOME"
    fi

}


tail_log(){

    tail -F -n "${TAIL_FROM}" "${CATALINA_HOME}"/logs/catalina.out

}


test_stuff(){

    echo "just a place to test stuff, unit testing in Bash :-p"

}


parse_argv(){

    while getopts ":ncN:f:" opt "${@}"; do
        case "${opt}" in
        'n')
            USE_ANSI_COLOR="no";;
        'c')
            GUESS_CATALINA_HOME="yes";;
        'N')
            TAIL_FROM="${OPTARG}";;
        'f')
            FILTER="${OPTARG}";;
        ':')
            die "Missing argument for -${OPTARG}";;
        \?)
            die "Invalid option: -${OPTARG}";;
        esac
    done

    return 0

}


#main
{
    # action switch
    action "${@}"
    shift

    # parse command line options
    parse_argv "${@}"        

    # variable test
    sanity

    # do something
    case "${ACTION}" in
        'list')
            list_info;;
        'help')
            menu_exit;;
        'fire')
            start_tomcat;;
        'stop')
            stop_tomcat;;
        'anew')
            restart_tomcat;;
        'alog')
            tail_access;;
        'drop')
            drop_wars;;
        'tail')
            tail_log;;
        'test')
            test_stuff;;
    esac

}
